#!/usr/bin/env node

var program = require("commander");
const ADOModule = require("./index.js");
const nodeOs = require("os");
const nodePath = require("path");
const thisPackage = require("./package");

var logger = new function() {
    this.showLogs = true;
    this.warnings = false;

    this.log = function() {
        if (this.showLogs) {
            console.log.apply(this, arguments);
        }
    };

    this.warn = function() {
        if (this.warnings) {
            console.warn.apply(this, arguments);
        }
    };
}();

const defaultDomain = "https://dev.azure.com";
const defaultDirectory = ".";
const defaultOutput = "Desktop/";
const defaultVelocitiesFile = "velocities.csv";

program
    .version(thisPackage.version)
    .option("--domain <url>", "name of your ADO instance. Defaults to " + defaultDomain, defaultDomain)
    .option("-o, --outputDir <dir>", "optional directory for output. defaults to ~/" + defaultOutput, getOutputDir , getOutputDir(defaultOutput))
    .option("--pat <PAT>", "ADO PAT ", "")
    .option("--printOpts", "for that classic printf debugging ;)");
    //.option("-c, --openCsv", "open csv file on completion", false)
    //.option("-w, --warnings", "show warnings", false);

var velocityCommand = program
    .command("velocities");
velocityCommand
    .option("--project <name>", "the ADO project analyze","<ENTER A PROJECT NAME>")
    .option("-c, --count <count>", "the number of team velocities to collect",myParseInt)
    .option("-f --file_name <name>", "the name of the output file. Defaults to " + defaultVelocitiesFile, defaultVelocitiesFile)
    .option("--exclude <excluded teams>", "comma separated list of teams to exclude",commaSeparatedList)
    .option("--include <included teams>", "comma separated list of teams to include",commaSeparatedList)
    .option("-x, --over_write", "over write the output file if it exists")
    .option("-C, --count_items", "count items instead of summing effort")
    .option("-p, --planned <days>", "extra days to count from the start of the sprint for planned work", myParseInt,0)
    .option("-l, --late <days>", "extra days to count from the end of the sprint for late work", myParseInt,0)
    .description("get  velocities for all teams in a project")
    .action(()=>{
        velocities();});


var statsCommand = program
    .command("stats");
statsCommand
    .option("-d, --directory <dir>", "directory of repos to analyze",defaultDirectory)
    .option("--dates <dates>", "list of dates to analyze", commaSeparatedList)
    .option("--project <name>", "the ADO project analyze","<ENTER A PROJECT NAME>")
    .option("-v, --vsts", "analyze vsts builds")
    .option("-c, --cloc", "analyze via cloc")
    .option("-t, --tests", "analyze tests via grep")  
    .option("-b, --build", "queue ADO builds")  
    .option("--pull", "pull the latest code")
    .option("--exclude_dirs <excluded dirs>", "comma separated list of directory to exclude from analysis",commaSeparatedList)
    .option("--include_lang <included languages>", "comma separated list of languages to include in analysis",commaSeparatedList)
    .action(() => {
        stats();
    });
program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
}

//console.log(program);
function commaSeparatedList(value, dummyPrevious) {
    return value.split(',');
  }

  function myParseInt(value, dummyPrevious) {
    // parseInt takes a string and an optional radix
    return parseInt(value,10);
  }

async function velocities(){
    velocityCommands  =  velocityCommand;
    var ADOOpts = {
        ADO_HOST  :  program.domain,
        PAT       :  program.pat,
    };
    var velocityOpts = {
        outFile : velocityCommands.file_name,
        projectId:velocityCommands.project,
        count : velocityCommands.count,
        exclude : velocityCommands.exclude,
        include : velocityCommands.include,
        overWrite:velocityCommands.over_write,
        aggregate: velocityCommands.count_items ? "count" : "sum",
        extraPlannedDays: velocityCommands.planned,
        lateAfterDays: velocityCommands.late
        
    };
    if (program.printOpts){
        console.log(ADOOpts)
        console.log(velocityOpts)
    }
    let  ADOTools = ADOModule(ADOOpts);
    let velocityFields =ADOTools.velocityFields;
    let results = await ADOTools.velocities(velocityOpts);
    console.table(results.flat(),velocityFields);
}

async function stats(){
    var statsCommands  =  statsCommand;
    var ADOOpts = {
        ADO_HOST  :  program.domain,
        PAT       :  program.pat,
    };

    var statsOpts = {

        Directory : statsCommands.directory,
        dates : statsCommands.dates,
        VSTS : statsCommands.vsts,
        CLOC : statsCommands.cloc,
        Tests: statsCommands.tests,
        projectId:statsCommands.project,
        outputDirectory: program.outputDir,
        langFilters: statsCommands.include_lang,
        excludeDirs: statsCommands.exclude_dirs,
        build : statsCommands.build,
        pull : statsCommands.pull,

    };
    if (program.printOpts){
        console.log(ADOOpts);
        console.log(statsOpts);
    }
    let  ADOTools = ADOModule(ADOOpts);
    let results = await ADOTools.codeStats(statsOpts);
    console.table(results.flat());
}



function getDateTimeForPath() {
    var now = new Date();
    return `tftools/${now.getFullYear()}.${("0" + (now.getMonth() + 1)).slice(-2)}.${("0" + now.getDate()).slice(-2)}/`;
    // return now.getFullYear() + "" + (now.getMonth() + 1) + "" + now.getDate() + "-" + now.getHours() + "" + now.getMinutes() + "" + now.getSeconds();
}

function getOutputDir(outputArg){
    var outputVal = outputArg;
    if (outputVal == defaultOutput || !outputVal){
        outputVal = nodePath.join(nodeOs.homedir(),outputVal);
    }
    return nodePath.join(outputVal, getDateTimeForPath());
}
